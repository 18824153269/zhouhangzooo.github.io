<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>node.js Https请求传递数据</title>
      <link href="/2019/04/24/node-js-Https%E8%AF%B7%E6%B1%82%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/04/24/node-js-Https%E8%AF%B7%E6%B1%82%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="我的代码如下："><a href="#我的代码如下：" class="headerlink" title="我的代码如下："></a>我的代码如下：</h4><h4 id="参考了网上大多说的是req-write-contents-我试了这样写没有效果"><a href="#参考了网上大多说的是req-write-contents-我试了这样写没有效果" class="headerlink" title="参考了网上大多说的是req.write(contents);我试了这样写没有效果"></a>参考了网上大多说的是req.write(contents);我试了这样写没有效果</h4><h4 id="而是在url拼接-contents-来传递数据"><a href="#而是在url拼接-contents-来传递数据" class="headerlink" title="而是在url拼接?contents 来传递数据"></a>而是在url拼接?contents 来传递数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import * as https from &quot;https&quot;;</span><br><span class="line">var querystring = require(&apos;querystring&apos;);</span><br><span class="line"></span><br><span class="line">//传递到后台的数据</span><br><span class="line">var data = &quot;1&quot;;</span><br><span class="line">var post_data = &#123; classId: data &#125;;</span><br><span class="line">var contents = querystring.stringify(post_data);</span><br><span class="line"></span><br><span class="line">var options = &#123;</span><br><span class="line">    hostname: &quot;www.baidu.com&quot;,</span><br><span class="line">    port: 443,</span><br><span class="line">    path: &quot;/bfi-web/api/student/course/list_new?&quot; + contents,</span><br><span class="line">    method: &quot;POST&quot;,</span><br><span class="line">    rejectUnauthorized: false,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        Accept: &quot;*/*&quot;,</span><br><span class="line">        &quot;Accept-Encoding&quot;: &quot;utf-8&quot;,</span><br><span class="line">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8&quot;,</span><br><span class="line">        Connection: &quot;keep-alive&quot;,</span><br><span class="line">        Host: &quot;www.eluzhu.com&quot;,</span><br><span class="line">        token: token,</span><br><span class="line">        version: &quot;2.6&quot;,</span><br><span class="line">        from: &quot;IDE&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var mData = &apos;&apos;;</span><br><span class="line">var req = https.request(options, function (res) &#123;</span><br><span class="line">    res.setEncoding(&apos;utf-8&apos;);</span><br><span class="line">    res.on(&quot;data&quot;, function (d) &#123;</span><br><span class="line">        console.log(&apos;===================================data===========&apos; + d);</span><br><span class="line">        mData += d;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(&quot;end&quot;, function () &#123;</span><br><span class="line">        var data = JSON.parse(mData);</span><br><span class="line">        // console.log(&apos;===================================data===========&apos; + mData);</span><br><span class="line">        if (data.code == &quot;000000&quot;) &#123;</span><br><span class="line">            MyTreeProvider.datas = data.data.list;</span><br><span class="line">            MyTreeProvider.initMyTreeList();</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            vscode.window.showInformationMessage(&quot;请求失败：&quot; + data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">// req.write(contents);</span><br><span class="line">req.on(&quot;error&quot;, function (e) &#123;</span><br><span class="line">    console.error(&quot;====================================================&quot; + e);</span><br><span class="line">&#125;);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><p>本文参考来自：<a href="https://www.imooc.com/qadetail/181878" target="_blank" rel="noopener">https://www.imooc.com/qadetail/181878</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> https </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js请求https出现乱码解决方案</title>
      <link href="/2019/04/23/node-js%E8%AF%B7%E6%B1%82https%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/04/23/node-js%E8%AF%B7%E6%B1%82https%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h4 id="使用node-js请求https，代码如下："><a href="#使用node-js请求https，代码如下：" class="headerlink" title="使用node.js请求https，代码如下："></a>使用node.js请求https，代码如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">var options = &#123;</span><br><span class="line">    hostname: &quot;www.baidu.com&quot;,</span><br><span class="line">    port: 443,</span><br><span class="line">    path: &quot;/bfi-web/api/student/course/list_new&quot;,</span><br><span class="line">    method: &quot;POST&quot;,</span><br><span class="line">    rejectUnauthorized: false,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        Accept: &quot;*/*&quot;,</span><br><span class="line">        &apos;Content-Type&apos;:  &apos;text/html;  charset=utf-8&apos;,</span><br><span class="line">        Connection: &quot;keep-alive&quot;,</span><br><span class="line">        Host: &quot;www.eluzhu.com&quot;,</span><br><span class="line">        //后台定义的header</span><br><span class="line">        token: &quot;&quot;,</span><br><span class="line">        version: &quot;1&quot;,</span><br><span class="line">        from: &quot;IDE&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var req = https.request(options, function(res) &#123;</span><br><span class="line">    console.log(`HEADERS: $&#123;JSON.stringify(res.headers)&#125;`);</span><br><span class="line">    res.setEncoding(&apos;utf-8&apos;);</span><br><span class="line">    var mData = &apos;&apos;;</span><br><span class="line">    res.on(&quot;data&quot;, function(d) &#123;</span><br><span class="line">        console.log(&apos;===================================data===========&apos; + d);</span><br><span class="line">        mData += d;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(&quot;end&quot;, function() &#123;</span><br><span class="line">        var data = JSON.parse(mData);</span><br><span class="line">        if (data.code == &quot;000000&quot;) &#123;</span><br><span class="line">            //成功处理</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            vscode.window.showInformationMessage(&quot;请求失败：&quot; + data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">req.end();</span><br><span class="line">req.on(&quot;error&quot;, function(e) &#123;</span><br><span class="line">    console.error(&quot;====================================================&quot; + e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过控制台查看console.log(`HEADERS: $&#123;JSON.stringify(res.headers)&#125;`)结果，</span><br><span class="line">查看里面是&quot;content-type&quot;:&quot;application/json;charset=utf-8&quot;，可以看到后台定义的格式是utf-8；</span><br><span class="line">这里返回什么格式我们就需要用什么格式去解码。</span><br></pre></td></tr></table></figure><h4 id="最主要方法：res-setEncoding-‘utf-8’"><a href="#最主要方法：res-setEncoding-‘utf-8’" class="headerlink" title="最主要方法：res.setEncoding(‘utf-8’);"></a>最主要方法：res.setEncoding(‘utf-8’);</h4><p>在网上看到好几种解决乱码的方法都没有效，这次碰到问题记录一下，方便以后别人的需要。</p>]]></content>
      
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo显示github图标解决方法</title>
      <link href="/2019/04/20/hexo%E6%98%BE%E7%A4%BAgithub%E5%9B%BE%E6%A0%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/20/hexo%E6%98%BE%E7%A4%BAgithub%E5%9B%BE%E6%A0%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本人使用的是yelee主题<br>我这里总结一下：</p><h2 id="操作一"><a href="#操作一" class="headerlink" title="操作一"></a>操作一</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">首先下载一个github图标，放在/yelee/source/img/目录下，命名为GitHub.png，注意是GitHub，而不是Github和github；</span><br><span class="line">接下来删除在/yelee/source/css/_partial/customise/social-icon.styl的46-50行，然后在img-logo = 添加GitHub white 100。</span><br></pre></td></tr></table></figure><a id="more"></a><p>GitHub white 100 的意思是github添加白色背景且透明度为100，背景可以自行选择<br>hexo clean 清理缓存<br><a href="https://XXX/img/GitHub.png" target="_blank" rel="noopener">https://XXX/img/GitHub.png</a> XXX填入你的仓库地址</p><p>注意：如果按我的方法一步步走，最终会出现github图片，如果hexo s预览出现图片但线上不显示，那么可能你一开始命名的图片名字不同，我由于一开始命名不同，我命名了Github.png了，因此我在通过F12查看，说找不到图片，<a href="https://zhouhangzooo.github.io/img/GitHub.png。">https://zhouhangzooo.github.io/img/GitHub.png。</a><br>这个地址返回的是404，我想可能是我一开始命名的问题了，我试着输入<a href="https://zhouhangzooo.github.io/img/Github.png，">https://zhouhangzooo.github.io/img/Github.png，</a><br>结果果然图片出现了，这个问题和命名标签问题是一样的，对于已经命名好的标签，我们不能去修改，至于为什么我也不知道，但如果修改了，标签下的文章就找不到了，这个不知是不是hexo的机制问题，只认定了初次创建的标签，就算你修改了它指引的地址也不会改变，所以我们尽量不要改标签、标题名字和文件夹名字等。<br>如果和我一样命名出现了错误，可以参考我的解决方法是：先将img目录下的github图片和GitHub white 100 删除，然后执行 hexo clean &amp;&amp; hexo g 命令，再执行 hexo d ，接下来重新执行操作一。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的-&gt;用法</title>
      <link href="/2019/04/17/Java%E4%B8%AD%E7%9A%84-%E7%94%A8%E6%B3%95/"/>
      <url>/2019/04/17/Java%E4%B8%AD%E7%9A%84-%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="gt-是lambda表达式，Java8新特性，它的作用是简化匿名函数"><a href="#gt-是lambda表达式，Java8新特性，它的作用是简化匿名函数" class="headerlink" title="-&gt;是lambda表达式，Java8新特性，它的作用是简化匿名函数"></a>-&gt;是lambda表达式，Java8新特性，它的作用是简化匿名函数</h2><a id="more"></a><p>虽说我们可以不用这种写法，但还是需要了解-&gt;的作用，因为可能别人是这样写的；接下来我们通过几个例子了解一下。</p><p>例子：线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//Before Java 8:</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;Before Java8 &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">//Java 8 way:</span><br><span class="line">new Thread( () -&gt; System.out.println(&quot;In Java8!&quot;) ).start();</span><br></pre></td></tr></table></figure></p><p>例子：排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Before Java 8</span><br><span class="line">private void sortUsingJava7(List&lt;String&gt; names)&#123;</span><br><span class="line">Collections.sort(names, new Comparator&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int compare(String s1, String s2) &#123;</span><br><span class="line">return s1.compareTo(s2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Java 8 way:</span><br><span class="line">private void sortUsingJava8(List&lt;String&gt; names)&#123;</span><br><span class="line">Collections.sort(names, (s1, s2) -&gt; s1.compareTo(s2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例子：监听器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Before Java 8:</span><br><span class="line">JButton show =  new JButton(&quot;Show&quot;);</span><br><span class="line">show.addActionListener(new ActionListener() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void actionPerformed(ActionEvent e) &#123;</span><br><span class="line">           System.out.println(&quot;without lambda expression is boring&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Java 8 way:</span><br><span class="line">show.addActionListener((e) -&gt; &#123;</span><br><span class="line">    System.out.println(&quot;Action !! Lambda expressions Rocks&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>通过上面例子可以看到，-&gt;的作用就是将匿名函数用-&gt;代替，匿名函数如果有输入参数，比如compare(String s1, String s2)，则用(s1,s2)来表示；如果没有输入参数，则用()来表示，然后-&gt;后面写处理结果。</p><h2 id="总结公式：（输入参数-gt-输出参数"><a href="#总结公式：（输入参数-gt-输出参数" class="headerlink" title="总结公式：（输入参数)-&gt;(输出参数)"></a>总结公式：（输入参数)-&gt;(输出参数)</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typeScript定义全局变量供其他ts文件使用</title>
      <link href="/2019/04/16/typeScript%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%BE%9B%E5%85%B6%E4%BB%96ts%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/16/typeScript%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%BE%9B%E5%85%B6%E4%BB%96ts%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h2><p>先在ts中定义一个模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export module FileModule &#123;</span><br><span class="line">export var flag: boolean = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在另一个ts文件中引入模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; FileModule &#125; from &apos;定义ts模块路径&apos;; //格式如下：vs/workbench/parts/files/electron-browser/fileActions</span><br></pre></td></tr></table></figure></p><p>接着就可以使用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileModule.flag = true;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="全局常用变量可以新建一个ts文件"><a href="#全局常用变量可以新建一个ts文件" class="headerlink" title="全局常用变量可以新建一个ts文件"></a>全局常用变量可以新建一个ts文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export class MessageText &#123;</span><br><span class="line"></span><br><span class="line">public static Error_identifier: string = &apos;identifier&apos;;</span><br><span class="line"></span><br><span class="line">public static Error_isundefined: string = &apos;is undefined&apos;;</span><br><span class="line"></span><br><span class="line">public static Error_expectedAnExpression: string = &apos;expected an expression&apos;;</span><br><span class="line"></span><br><span class="line">public static Error_unrecognizedPreprocessingDirective: string = &apos;unrecognized preprocessing directive&apos;;</span><br><span class="line"></span><br><span class="line">public static Error_expectedAFileName: string = &apos;expected a file name&apos;;</span><br><span class="line"></span><br><span class="line">public static Error_expectedA: string = &quot;expected a &apos;;&apos;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; MessageText &#125; from &apos;vs/workbench/api/node/messageText&apos;;</span><br><span class="line">MessageText.Error_identifier</span><br></pre></td></tr></table></figure><p>MessageText.Error_identifier 相当于’identifier’</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的then()用法</title>
      <link href="/2019/04/13/JavaScript%E7%9A%84then-%E7%94%A8%E6%B3%95/"/>
      <url>/2019/04/13/JavaScript%E7%9A%84then-%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>昨天做项目碰到一个问题：要执行A方法，方法里面有写入文件的耗时操作，然后我想等A方法执行完了再执行B方法，因此我们可以用js特有的then()方法，那么它可以帮我们完成这个问题。<br>封装A方法为函数，A方法：vscode.commands.executeCommand(‘workbench.action.files.newUntitledFile’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const p = function()&#123;</span><br><span class="line">return vscode.commands.executeCommand(&apos;workbench.action.files.newUntitledFile&apos;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再执行B方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p().then(val =&gt; &#123;</span><br><span class="line">vscode.commands.executeCommand(&quot;extension.demo.openWebview&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件调用源码功能</title>
      <link href="/2019/04/10/vscode%E6%8F%92%E4%BB%B6%E4%B8%8E%E6%BA%90%E7%A0%81%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/04/10/vscode%E6%8F%92%E4%BB%B6%E4%B8%8E%E6%BA%90%E7%A0%81%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>本文讲述一下vscode插件和源码通过命令进行通信<br>在之前”vscode插件与webview相互通信”文章中，讲述webview和插件进行通信，里面有个注册命令，之前文章没有详细代码，其实代码vscoode官网都有，</p><h2 id="接下来要说命令，那么先贴一下注册命令的代码"><a href="#接下来要说命令，那么先贴一下注册命令的代码" class="headerlink" title="接下来要说命令，那么先贴一下注册命令的代码"></a>接下来要说命令，那么先贴一下注册命令的代码</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">context.subscriptions.push(vscode.commands.registerCommand(&apos;extension.demo.openWebview&apos;, function (uri) &#123;</span><br><span class="line">//这个uri就是传递过来的参数，无论是vscode插件和webview通信还是vscode插件和vscode源码通信都可以通过这个进行数据传递</span><br><span class="line">        if (flag) &#123;//判断flag让webview不重复打开</span><br><span class="line">if(value == undefined) &#123; //如果是第一次打开课程</span><br><span class="line">value = uri;</span><br><span class="line">panel.webview.postMessage(&#123; command: &quot;course_id&quot;,text: value&#125;);</span><br><span class="line">&#125;</span><br><span class="line">else if (value != undefined &amp;&amp; value == uri) &#123; //如果重复点击</span><br><span class="line">return;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">value = uri;</span><br><span class="line">panel.webview.postMessage(&#123; command: &quot;course_id&quot;,text: value &#125;);</span><br><span class="line">&#125;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">value = uri;</span><br><span class="line">panel = vscode.window.createWebviewPanel(</span><br><span class="line">&apos;testWebview&apos;, // viewType</span><br><span class="line">&quot;课程提示&quot;, // 视图标题</span><br><span class="line">2, // 显示在编辑器的哪个部位</span><br><span class="line">&#123;</span><br><span class="line">enableScripts: true, // 启用JS，默认禁用</span><br><span class="line">retainContextWhenHidden: true, // webview被隐藏时保持状态，避免被重置</span><br><span class="line">enableFindWidget: true,</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">flag = true;</span><br><span class="line"></span><br><span class="line">panel.webview.html = getWebViewContent(context, &apos;src/test-webview.html&apos;);</span><br><span class="line">        //发送消息到webview</span><br><span class="line">if (value !== undefined &amp;&amp; value !== &quot;&quot;) &#123;</span><br><span class="line">panel.webview.postMessage(&#123; command: value &#125;);</span><br><span class="line">&#125;</span><br><span class="line">panel.webview.onDidReceiveMessage(message =&gt; &#123;</span><br><span class="line">//接收命令</span><br><span class="line">            switch (message.command) &#123;</span><br><span class="line"></span><br><span class="line">case &apos;openHint&apos;:</span><br><span class="line">vscode.window.showInformationMessage(message.text, &#123;</span><br><span class="line">modal: true</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">&#125;, undefined, context.subscriptions);</span><br><span class="line"></span><br><span class="line">//当webview被关闭时，设置标识，就可以重新打开webview</span><br><span class="line">panel.onDidDispose(</span><br><span class="line">() =&gt; &#123;</span><br><span class="line">            flag = false;</span><br><span class="line">console.log(&apos;===============================close-webview&apos;);</span><br><span class="line">&#125;, null, context.subscriptions);</span><br><span class="line"></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">function getWebViewContent(context, templatePath) &#123;</span><br><span class="line">const resourcePath = util.getExtensionFileAbsolutePath(context, templatePath);</span><br><span class="line">const dirPath = path.dirname(resourcePath);</span><br><span class="line">let html = fs.readFileSync(resourcePath, &apos;utf-8&apos;);</span><br><span class="line">// vscode不支持直接加载本地资源，需要替换成其专有路径格式，这里只是简单的将样式和JS的路径替换</span><br><span class="line">html = html.replace(/(&lt;link.+?href=&quot;|&lt;script.+?src=&quot;|&lt;img.+?src=&quot;)(.+?)&quot;/g, (m, $1, $2) =&gt; &#123;</span><br><span class="line">return $1 + vscode.Uri.file(path.resolve(dirPath, $2)).with(&#123;</span><br><span class="line">scheme: &apos;vscode-resource&apos;</span><br><span class="line">&#125;).toString() + &apos;&quot;&apos;;</span><br><span class="line">&#125;);</span><br><span class="line">return html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webview页面"><a href="#webview页面" class="headerlink" title="webview页面"></a>webview页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">window.addEventListener(&apos;message&apos;, event =&gt; &#123;</span><br><span class="line">        const message = event.data;</span><br><span class="line">        if(message.command != &quot;course_id&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        courseId = message.text;</span><br><span class="line">        // console.log(&quot;==================================courseId&quot;  + courseId);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><pre><code>&lt;div&gt;    onclick=&quot;openHint()&quot;&lt;/div&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function openHint() &#123;</span><br><span class="line">    vscode.postMessage(&#123;</span><br><span class="line">        command: &apos;openHint&apos;,</span><br><span class="line">        text: &apos;试着输入 helloword &apos;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面的代码，其实和官方差不多，上面代码是注册了命令，通过命令打开webveiw，其实就是打开了src目录下的test-webview.html页面，这个html我们可以自定义，同时页面可以传输数据到这里然后panel.webview.onDidReceiveMessage接收并处理。</p><h2 id="当我们想要传输数据到webivew时"><a href="#当我们想要传输数据到webivew时" class="headerlink" title="当我们想要传输数据到webivew时"></a>当我们想要传输数据到webivew时</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vscode.commands.executeCommand(&quot;extension.demo.openWebview&quot;,&quot;需要传输的数据&quot;);</span><br></pre></td></tr></table></figure><p>这样通过命令我们就可以将数据传输到webview页面上了，那么我们试试和源码进行交互</p><h2 id="思考：源码中肯定有实现新建文件，而它给我们提供快捷键Ctrl-N打开，所以vscode源码中肯定有一个新建文件的命令，我们只需执行它，便可以新建文件"><a href="#思考：源码中肯定有实现新建文件，而它给我们提供快捷键Ctrl-N打开，所以vscode源码中肯定有一个新建文件的命令，我们只需执行它，便可以新建文件" class="headerlink" title="思考：源码中肯定有实现新建文件，而它给我们提供快捷键Ctrl+N打开，所以vscode源码中肯定有一个新建文件的命令，我们只需执行它，便可以新建文件"></a>思考：源码中肯定有实现新建文件，而它给我们提供快捷键Ctrl+N打开，所以vscode源码中肯定有一个新建文件的命令，我们只需执行它，便可以新建文件</h2><p>根据我的研究，源码的功能，绝大部分源码实现方法在XXService.ts中，而你想要调用它，那么方法在XXActions.ts中。<br>我们查看一个例子：fileActions.ts文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">export class GlobalNewUntitledFileAction extends Action &#123;</span><br><span class="line">public static readonly ID = &apos;workbench.action.files.newUntitledFile&apos;;</span><br><span class="line">public static readonly LABEL = nls.localize(&apos;newUntitledFile&apos;, &quot;New Untitled File&quot;);</span><br><span class="line"></span><br><span class="line">constructor(</span><br><span class="line">id: string,</span><br><span class="line">label: string,</span><br><span class="line">@IEditorService private readonly editorService: IEditorService</span><br><span class="line">) &#123;</span><br><span class="line">super(id, label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public run(): Promise&lt;any&gt; &#123;</span><br><span class="line"></span><br><span class="line"> return this.editorService.openEditor(&#123; resource: resources.joinPath(lastDir, untitledFileName), options: &#123; pinned: true &#125; &#125; as IUntitledResourceInput); // untitled are always pinned</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> public run(): Promise&lt;any&gt; &#123;</span><br><span class="line"> return this.editorService.openEditor(&#123; options: &#123; pinned: true &#125; &#125; as IUntitledResourceInput); // untitled are always pinned</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面是vsocde源码中代码，可以看到最终运行run即可新建文件，我们一步步找，可以看到官方调用run方法是通过actions.ts文件中的接口方法，通过一个参数继承这个接口，然后参数调用里面的方法实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export interface IActionRunner extends IDisposable &#123;</span><br><span class="line">run(action: IAction, context?: any): Promise&lt;any&gt;;</span><br><span class="line">onDidRun: Event&lt;IRunEvent&gt;;</span><br><span class="line">onDidBeforeRun: Event&lt;IRunEvent&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而我们如果想要在插件中实现新建文件，那么我们只需要执行命令即可，命令就是XXAction的id，比如新建文件的命令就是GlobalNewUntitledFileAction.ID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import * as vscode from &quot;vscode&quot;;</span><br><span class="line">vscode.commands.executeCommand(&apos;workbench.action.files.newUntitledFile&apos;);</span><br></pre></td></tr></table></figure></p><p>因此，vscode所有快捷键的功能我们都可以通过执行命令来实现。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git最实用命令总结</title>
      <link href="/2019/04/06/git%E6%9C%80%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/04/06/git%E6%9C%80%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="github第一次上传项目"><a href="#github第一次上传项目" class="headerlink" title="github第一次上传项目"></a>github第一次上传项目</h2><p>进入上传项目的文件夹里，右击选择==Git Bash Here==（如果没有需要下载git工具）依次执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 你的远程仓库地址</span><br><span class="line">git add .保存本地代码</span><br><span class="line">git commit -m &quot;提交信息&quot;本地代码提交</span><br><span class="line">git push 或者 git push origin master本地代码提交到远程仓库</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果提示使用git push origin master，那么很可能是没有设置git账号和密码，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></p><p>然后下次git就不用重复输入用户名和密码了</p><h2 id="以后上传时执行命令"><a href="#以后上传时执行命令" class="headerlink" title="以后上传时执行命令"></a>以后上传时执行命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="获取远程项目"><a href="#获取远程项目" class="headerlink" title="获取远程项目"></a>获取远程项目</h2><p>如果是多个开发者维护的项目，同事进行了上传了自己的代码到远程项目，而我们为了保持项目一致性，时常需要进行项目更新<br>3-1：如果我们本地没有修改项目，我们可以直接拉取更新的项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></p><p>3-2：很多时候我们都会对本地项目进行一些更改，那么我们需要保存本地项目，然后再更新远程项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>通常我们不建议使用==git add .==，因为这样会将我们项目所有文件进行提交，我们建议只提交你修改的文件或文件夹，比如提交src文件夹，可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add src</span><br></pre></td></tr></table></figure></p><p>如果和别人都修改了相同的代码，那么很可能会产生冲突，解决冲突的方法有很多，我们这里推荐一种比较简单常用的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash 保存</span><br><span class="line">git pull</span><br><span class="line">git stash pop 合并</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>我们需要先保存自己代码，然后拉取别人的代码，进行合并，然后再上传（解决完冲突之后最好上传一下，免得别人还碰上冲突）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github提交没有贡献解决方案</title>
      <link href="/2019/04/05/github%E6%8F%90%E4%BA%A4%E6%B2%A1%E6%9C%89%E8%B4%A1%E7%8C%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/04/05/github%E6%8F%90%E4%BA%A4%E6%B2%A1%E6%9C%89%E8%B4%A1%E7%8C%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><code>清明时节雨无声，编程路上继续行。</code></p><p>前几天在github提交代码，发现没有显示贡献，于是查找原因顺便记录一下：原因可能是提交时的邮箱和github账号的邮箱不一致。</p><h2 id="检查自己的emal是否正确"><a href="#检查自己的emal是否正确" class="headerlink" title="检查自己的emal是否正确"></a>检查自己的emal是否正确</h2><p>git config –global user.email 回车</p><h2 id="设置邮箱名和名字"><a href="#设置邮箱名和名字" class="headerlink" title="设置邮箱名和名字"></a>设置邮箱名和名字</h2><p>git config –global user.name “你的名字”<br>git config –global user.email “你的邮箱” 如<a href="mailto:XXXX@163.com" target="_blank" rel="noopener">XXXX@163.com</a><br>`</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode调试vue项目</title>
      <link href="/2019/04/04/vscode%E8%B0%83%E8%AF%95vue%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/04/04/vscode%E8%B0%83%E8%AF%95vue%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Debugger-for-Chrome插件"><a href="#安装Debugger-for-Chrome插件" class="headerlink" title="安装Debugger for Chrome插件"></a>安装Debugger for Chrome插件</h2><p>找到“扩展”或者按快捷键“Ctrl+Shift+X”，输入Debugger for Chrome查找，并安装。</p><h2 id="配置chrome到launch-json中"><a href="#配置chrome到launch-json中" class="headerlink" title="配置chrome到launch.json中"></a>配置chrome到launch.json中</h2><p>然后打开“调试”或者快捷键“Ctrl+Shift+D”，点击配置按钮Open launch.json，弹出选项中选择Chrome，然后会创建并打开launch.json文件，将里面的内容替换成一下内容，默认内容是下面的内容<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;chrome&quot;,</span><br><span class="line">        &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;vuejs: chrome&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;http://localhost:8080&quot;,</span><br><span class="line">        &quot;webRoot&quot;: &quot;$&#123;workspaceFolder&#125;/src&quot;,</span><br><span class="line">        &quot;breakOnLoad&quot;: true,</span><br><span class="line">        &quot;sourceMapPathOverrides&quot;: &#123;</span><br><span class="line">          &quot;webpack:///./src/*&quot;: &quot;$&#123;webRoot&#125;/*&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="在终端运行命令npm-run-dev"><a href="#在终端运行命令npm-run-dev" class="headerlink" title="在终端运行命令npm run dev"></a>在终端运行命令npm run dev</h2><p>方法一（推荐）：直接快捷键”Ctrl+`“打开终端，运行命令npm run dev，然后直接F5即可打开chrome浏览器调试；<br>方法二：可以在vscode中右击vue项目的根目录，比如src，Open in Terminal（打开终端），然后再输入cd ..，回退到vue项目的根目录，我们的目的是让终端在项目的根目录上，然后就可以运行命令npm run dev，然后点击调试功能中的绿色箭头开启调试即可打开chrome浏览器调试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\eluzhu\Desktop\项目\test\src&gt; cd ..</span><br><span class="line">PS C:\Users\eluzhu\Desktop\项目\test&gt; npm run dev</span><br></pre></td></tr></table></figure></p><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>直接在你想要查看的代码第几行左侧添加断点，设置成功可以看到比如200行左侧出现红点，至此断点调试就完成了。<br>另外，默认vscode对vue没有代码高亮支持，可以下载Vetur插件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件与webview相互通信</title>
      <link href="/2019/04/03/vscode%E6%8F%92%E4%BB%B6%E4%B8%8Ewebview%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/04/03/vscode%E6%8F%92%E4%BB%B6%E4%B8%8Ewebview%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="webview发送消息给插件"><a href="#webview发送消息给插件" class="headerlink" title="webview发送消息给插件"></a>webview发送消息给插件</h2><p>插件js和ts都可以（webview需要引入vscode，可以通过<script src="../src/test-webview.js"></script>）<br>然后test-webview.js里面加入const testMode = false; const vscode = testMode ? {} : acquireVsCodeApi();</p><p>webview发送消息<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function openHint() &#123;</span><br><span class="line">vscode.postMessage(&#123;</span><br><span class="line">command: &apos;openHint&apos;,</span><br><span class="line">text: &apos;试着输入 helloword &apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function openNext() &#123;</span><br><span class="line">vscode.postMessage(&#123;</span><br><span class="line">command: &apos;openNext&apos;,</span><br><span class="line">text: &apos;准备好进入下一关了么？ &apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function openCheck() &#123;</span><br><span class="line">vscode.postMessage(&#123;</span><br><span class="line">command: &apos;openCheck&apos;,</span><br><span class="line">text: &apos;恭喜你，回答正确！！！ &apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>插件接收消息并处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">panel.webview.onDidReceiveMessage(message =&gt; &#123;</span><br><span class="line">switch (message.command) &#123;</span><br><span class="line"></span><br><span class="line">case &apos;openHint&apos;:</span><br><span class="line">vscode.window.showInformationMessage(message.text, &#123;</span><br><span class="line">modal: true</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">case &apos;openNext&apos;:</span><br><span class="line">vscode.window.showInformationMessage(message.text, &#123;</span><br><span class="line"> modal: true</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">case &apos;openCheck&apos;:</span><br><span class="line">vscode.window.showInformationMessage(message.text, &#123;</span><br><span class="line">modal: true</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;, undefined, context.subscriptions);</span><br></pre></td></tr></table></figure></p><p>最终结果点击按钮在vscode中弹出框</p><h2 id="插件发送消息给webview"><a href="#插件发送消息给webview" class="headerlink" title="插件发送消息给webview"></a>插件发送消息给webview</h2><p>在创建webview的时候，创建panel的时候利用panel发送消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var panel;</span><br><span class="line">panel.webview.postMessage(&#123; command: value &#125;);</span><br></pre></td></tr></table></figure></p><p>webview接收数据并处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;message&apos;, event =&gt; &#123;</span><br><span class="line">const message = event.data;</span><br><span class="line">if (message.command == undefined || !message.command) &#123;</span><br><span class="line">// console.log(&apos;---------------------------message：aaaa&apos;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">// console.log(&apos;---------------------------message：&apos; + message.command);</span><br><span class="line">courseId = message.command;</span><br><span class="line">//下面可以作自己的处理</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
